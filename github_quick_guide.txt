 How to start using GITHUB
	First go to the website https://github.com and create a new repository.
	
	then copy th url provided by github to clone the repository.
	
	In git bash (command-line/terminal) type $ git clone {repository URL} e.g. https://github.com/alexuko/Test.git [name of the folder/repository{optional}]
	
	Testing:
			
		then type "git status" again to check that there is an untracked file.
		
		type "git add start.txt" to add file or "git add ." to add everything
		
		then "git status" again and the files will be updated BUT not committed
		
		then we type " git commit -m "small message description" this will commit the new file into the repository 
		
		the finally type "git push origin master"
			Origin refers to the github copy of our repository
			Master refers to the default branch in the repository
			------------------------------------------------------------------------------------------------------
Committing Your Work and Viewing Differences
	
		"git diff {name of the file}" e.g. git diff README.md
			This command will show you all af the diferences that where made on this a specific file 
			before staging it e.g (git add README.md)
			IF all is ok then git add README.md THEN git commit -m "message" AND git push origin master

Versions of your Work
	"git log" will show you something like this:
		commit 54d1694dd71c93cb316df7a5c3a61781e32c3efb (HEAD -> master, origin/master)
		Author: Alejandro <test@test.com>
		Date:   Tue Apr 16 11:23:22 2019 +0100

			not necesary file deleted and update README

		commit abe870c07cc844ee9507bd9bcd9829d11dafd019
		Author: Alejandro <test@test.com>
		Date:   Tue Apr 16 11:13:10 2019 +0100

			first commit
	"git checkout {commit number}" e.g git checkout abe870c07cc844ee9507bd9bcd98 (first commit)
	will change the file to the version selected
	
	"git checkout master"
	will take you to the last updated version, (origin master)
	
	---- GitIgnore ----
	touch .gitignore && echo "node_modules/" >> .gitignore

	touch will generate the .gitignore file if it doesn't already exist.

	echo and >> will append node_modules/ at the end of .gitignore, causing the node_modules folder and all subfolders to be ignored.

	

